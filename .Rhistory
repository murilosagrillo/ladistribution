library(ladistribution)
#'@param alpha parameter 1.
#'@param gama  parameter 2.
#'@param L parameter 3.
#'@param x data
#'
#'@examples
#'
#'lafit(rla(1000,-2,3,4))
#'
#'@export
"lafit"<-function(x){
x <- as.vector(x)
n<-length(x)
set.seed(137)
fdpLA<-function(par){
alpha=par[1]
gama=par[2]
L=par[3]
-2*alpha*gama*((L*x^2/(L*x^2+gama)))^(1+L)*(1-((L*x^2/(L*x^2+gama)))^L)^(-1-alpha)*x^(-3)
}
#loglike_theta
l_theta<- function(par){
sum(log(fdpLA(par)))
}
gr<-function(par){
alpha<-par[1]
gama<-par[2]
L<-par[3]
c( -((n/alpha)-sum(log(1-(L*x^2/(gama+L*x^2))^L))),
-((n/gama)-(L+1)*sum(1/(gama+L*x^2))-(1+alpha)*L*sum(((gama+L*x^2)*(((1-gama/(gama+L*x^2))^(-L))-1))^(-1))),
-(sum(log(L*x^2/(gama+L*x^2)))+(L+1)*sum(gama/(L^2*x^2+gama*L))-(alpha+1)*sum(((1-(gama/(gama+L*x^2)))^L/((gama+L*x^2)*((1-(gama/(gama+L*x^2)))^(L)-1)))*(gama+(gama+L*x^2)*log(1-gama/(gama+L*x^2)))))
)
}
##INICIO genSA para obter os valores de chutes
fit.sa <- function(x,fdpLA) {
minusllike <- function(x) -sum(log(fdpLA(c(x[1],x[2],x[3]))))
lower <- c(-10,0.001,0.001) #may need some changes here
upper <- c(-0.01,10,10)
out <- GenSA(lower = lower, upper = upper,
fn = minusllike, control=list(verbose=TRUE,max.time=2))
return(out[c("value","par","counts")])
}
chute<-fit.sa(x,fdpLA)$par
##fim do genSA
res<-optim(chute, l_theta, method="BFGS",#x=x,
control=list(fnscale=-1, pgtol=1e-20, maxit=200,gr=gr))#, silent=T)
# if(class(res)=="try-error" || res$conv != 0 ||res$par[2]>.999||res$par[2]<.07) # a classe dos objetos que cont?m o erro,
gama_emv<-res$par[2]
L_emv<-res$par[3]
alpha_semi<-n/(sum(log(1-((L_emv*x^2)/(gama_emv+L_emv*x^2))^L_emv)))
fdpLA_densidade<-function(x){
-2*alpha_semi*gama_emv*((L_emv*x^2/(L_emv*x^2+gama_emv)))^(1+L_emv)*(1-((L_emv*x^2/(L_emv*x^2+gama_emv)))^L_emv)^(-1-alpha_semi)*x^(-3)
}
p<-3
AIC<-(-2*sum(log( -2*alpha_semi*gama_emv*((L_emv*x^2/(L_emv*x^2+gama_emv)))^(1+L_emv)*(1-((L_emv*x^2/(L_emv*x^2+gama_emv)))^L_emv)^(-1-alpha_semi)*x^(-3)      ))+2*p)
# AICc<-(-2*sum(log(  -2*alpha_semi*gama_emv*((L_emv*x^2/(L_emv*x^2+gama_emv)))^(1+L_emv)*(1-((L_emv*x^2/(L_emv*x^2+gama_emv)))^L_emv)^(-1-alpha_semi)*x^(-3)     ))+2*p+2*((p*(p+1))/(n-p-1)))
BIC<-(-2*sum(log( -2*alpha_semi*gama_emv*((L_emv*x^2/(L_emv*x^2+gama_emv)))^(1+L_emv)*(1-((L_emv*x^2/(L_emv*x^2+gama_emv)))^L_emv)^(-1-alpha_semi)*x^(-3)     ))+p*log(length(x)))
# HQIC<-(-2*sum(log(   -2*alpha_semi*gama_emv*((L_emv*x^2/(L_emv*x^2+gama_emv)))^(1+L_emv)*(1-((L_emv*x^2/(L_emv*x^2+gama_emv)))^L_emv)^(-1-alpha_semi)*x^(-3)      ))+2*p*log(log(length(y))))
emvs<-c(alpha_semi,gama_emv,L_emv)
dados_ordenados = sort(x)
cdfLA<-function(emvs,dados_ordenados){
1-(1-(L_emv*dados_ordenados^2/(gama_emv+L_emv*dados_ordenados^2))^L_emv)^(-alpha_semi)
}
cdfLA_ks_test<-function(x,par){
1-(1-(L_emv*x^2/(gama_emv+L_emv*x^2))^L_emv)^(-alpha_semi)
}
v = cdfLA(emvs, dados_ordenados)
s = qnorm(v)
u = pnorm((s - mean(s))/sqrt(var(s)))
W_temp <- vector()
A_temp <- vector()
for (i in 1:n) {
W_temp[i] = (u[i] - (2 * i - 1)/(2 * n))^2
A_temp[i] = (2 * i - 1) * log(u[i]) + (2 * n + 1 - 2 * i) * log(1 - u[i])
}
A_2 = -n - mean(A_temp)
W_2 = sum(W_temp) + 1/(12 * n)
W_star = W_2 * (1 + 0.5/n)
A_star = A_2 * (1 + 0.75/n + 2.25/n^2)
KS = ks.test(x = x, y="cdfLA_ks_test", par = emvs)
g<-c()
estim <- emvs
g$estimativas <- estim
g$convergencia <- res$conv
g$valor<-res$value
data<-x
hist(data,nclass = 20, freq = F,xlim=c(0.001,5),ylim=c(0.001,5))
# plot(density(x),xlim=c(0.001,max(x)))
curve(fdpLA_densidade,xlim=c(0.001,5),ylim=c(0.001,.5),lty=3,add=T)
# g$chute<-chute
g$AIC<-AIC
# g$AICc<-AICc
# g$BIC<-BIC
# g$HQIC<-HQIC
g$W_star<- W_star
g$A_star<- A_star
g$KS<- KS
return(g)
}
lafit(rla(1000,-2,3,4))
#'@param n number of observations. If length(n) > 1, the length is taken to be the number required.
#'@param alpha parameter 1.
#'@param gama  parameter 2.
#'@param L parameter 3.
#'
#'@examples
#'
#'rla(n=1000,alpha=-2,gama=2,L=3,log=FALSE)
#'
#'@export
rla <- function(n,alpha,gama,L){
u <- runif(n)
val <- sqrt(gama*L^(-1)*(-1+(1-(1-u)^(-1/alpha))^(-1/L))^(-1))
return(val)
}
lafit(rla(1000,-2,3,4))
library(GenSA)
lafit(rla(1000,-2,3,4))
rli <- function(n,alpha,gama,L){
u <- runif(n)
val <- gama*L^(-1)*(-1+(1-(1-u)^(-1/alpha))^(-1/L))^(-1)
return(val)
}
#'@param alpha parameter 1.
#'@param gama  parameter 2.
#'@param L parameter 3.
#'@param x data
#'
#'@examples
#'
#'lifit(rli(1000,-2,3,4))
#'
#'@export
"lifit"<-function(x){
x <- as.vector(x)
n<-length(x)
set.seed(137)
#acho que devo colocar a fdp aqui para usar para plotar o hist
fdpETPLb<-function(par){
alpha=par[1]
gama=par[2]
L=par[3]
(-L^(1 + L)*x^(-1 + L)* alpha *gama *(L* x +   gama)^(-1 - L)* (1 - L^L* x^(L) *(L *x + gama)^(-L))^(-1 - alpha))
}
l_theta<- function(par){
sum(log(fdpETPLb(par)))
}
##INICIO genSA para obter os valores de chutes
fit.sa3 <- function(x,fdpEPLW) {
minusllike <- function(x) -sum(log(fdpETPLb(c(x[1],x[2],x[3]))))
lower <- c(-100,0.001,0.001) #max need some changes here
upper <- c(-0.1,20,20)
out <- GenSA(lower = lower, upper = upper,
fn = minusllike, control=list(verbose=TRUE,max.time=2))
return(out[c("value","par","counts")])
}
chute<-fit.sa3(x,fdpETPLb)$par
##fim do genSA
res<-optim(chute, l_theta, method="BFGS",#x=x,
control=list(fnscale=-1, pgtol=1e-20, maxit=200))#, silent=T)
# if(class(res)=="trx-error" || res$conv != 0 ||res$par[2]>.999||res$par[2]<.07) # a classe dos objetos que cont?m o erro,
alpha_emv<-res$par[1]
gama_emv<-res$par[2]
L_emv<-res$par[3]
fdpETPLb_densidade<-function(x){
(-L_emv^(1 + L_emv)*x^(-1 + L_emv)* alpha_emv *gama_emv *(L_emv* x +   gama_emv)^(-1 - L_emv)* (1 - L_emv^L_emv* x^(L_emv) *(L_emv *x + gama_emv)^(-L_emv))^(-1 - alpha_emv))
}
p<-3
AIC<-(-2*sum(log( (-L_emv^(1 + L_emv)*x^(-1 + L_emv)* alpha_emv *gama_emv *(L_emv* x +   gama_emv)^(-1 - L_emv)* (1 - L_emv^L_emv* x^(L_emv) *(L_emv *x + gama_emv)^(-L_emv))^(-1 - alpha_emv)) ))+2*p)
emvs<-c(alpha_emv,gama_emv,L_emv)
dados_ordenados = sort(x)
cdfLA<-function(emvs,dados_ordenados){
1-(1-(L_emv*dados_ordenados/(gama_emv+L_emv*dados_ordenados))^L_emv)^(-alpha_emv)
}
cdfLA_ks_test<-function(x,par){
1-(1-(L_emv*x/(gama_emv+L_emv*x))^L_emv)^(-alpha_emv)
}
v = cdfLA(emvs, dados_ordenados)
s = qnorm(v)
u = pnorm((s - mean(s))/sqrt(var(s)))
W_temp <- vector()
A_temp <- vector()
for (i in 1:n) {
W_temp[i] = (u[i] - (2 * i - 1)/(2 * n))^2
A_temp[i] = (2 * i - 1) * log(u[i]) + (2 * n + 1 - 2 * i) * log(1 - u[i])
}
A_2 = -n - mean(A_temp)
W_2 = sum(W_temp) + 1/(12 * n)
W_star = W_2 * (1 + 0.5/n)
A_star = A_2 * (1 + 0.75/n + 2.25/n^2)
KS = ks.test(x = x, y="cdfLA_ks_test", par = emvs)
g<-c()
estim <- emvs
g$estimativas <- estim
g$convergencia <- res$conv
g$valor<-res$value
data<-x
hist(x,nclass = 70, freq = F,xlim=c(0.001,0.6),ylim=c(0.001,6))
# plot(densitx(x),xlim=c(0.001,max(x)))
curve(fdpETPLb_densidade,xlim=c(0.001,1),ylim=c(0.001,1),lty=3,add=T)
# g$chute<-chute
g$AIC<-AIC
# g$AICc<-AICc
# g$HQIC<-HQIC
g$W_star<- W_star
g$A_star<- A_star
g$KS<- KS
return(g)
}
lifit(rli(1000,-2,3,4))
lifit(rli(1000,-2,1.5,4))
lifit(rli(1000,-2,10,4))
lifit(rli(1000,-2,3,1.5))
lifit(rli(1000,-5,3,1.5))
lifit(rli(1000,-10,3,1.5))
lifit(rli(1000,-10,2,1.5))
lifit(rli(1000,-10,1.5,1.5))
dli <- Vectorize(function(y,alpha,gama,L,log = FALSE){
logden <- log(-L^(1 + L)* y^(-1 + L)* alpha *gama *(L* y +   gama)^(-1 - L)* (1 - L^L* y^(L) *(L *y + gama)^(-L))^(-1 - alpha))
val <- ifelse(log, logden, exp(logden))
return(val)
})
dli(y=0.4,alpha=-2,gama=2,L=3,log=FALSE)
